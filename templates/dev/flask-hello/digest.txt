Directory structure:
└── flask-hello/
    ├── app.py
    ├── flake.lock
    ├── flake.nix
    ├── pyproject.toml
    ├── .envrc
    ├── flask_hello/
    │   ├── __init__.py
    │   ├── blueprints/
    │   │   ├── __init__.py
    │   │   └── home.py
    │   ├── static/
    │   │   └── css/
    │   │       └── style.css
    │   └── templates/
    │       ├── base.html
    │       ├── errors.html
    │       └── index.html
    ├── nix/
    │   ├── module.nix
    │   ├── package.nix
    │   └── shell.nix
    └── .github/
        └── workflows/
            └── python-nix.yml

================================================
FILE: app.py
================================================
#!/usr/bin/env python3

from flask_hello import create_app

app = create_app()



================================================
FILE: flake.lock
================================================
{
  "nodes": {
    "flake-compat": {
      "flake": false,
      "locked": {
        "lastModified": 1747046372,
        "narHash": "sha256-CIVLLkVgvHYbgI2UpXvIIBJ12HWgX+fjA8Xf8PUmqCY=",
        "owner": "edolstra",
        "repo": "flake-compat",
        "rev": "9100a0f413b0c601e0533d1d94ffd501ce2e7885",
        "type": "github"
      },
      "original": {
        "owner": "edolstra",
        "repo": "flake-compat",
        "type": "github"
      }
    },
    "gitignore": {
      "inputs": {
        "nixpkgs": [
          "pre-commit-hooks",
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1709087332,
        "narHash": "sha256-HG2cCnktfHsKV0s4XW83gU3F57gaTljL9KNSuG6bnQs=",
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "rev": "637db329424fd7e46cf4185293b9cc8c88c95394",
        "type": "github"
      },
      "original": {
        "owner": "hercules-ci",
        "repo": "gitignore.nix",
        "type": "github"
      }
    },
    "nixpkgs": {
      "locked": {
        "lastModified": 1754725699,
        "narHash": "sha256-iAcj9T/Y+3DBy2J0N+yF9XQQQ8IEb5swLFzs23CdP88=",
        "owner": "nixos",
        "repo": "nixpkgs",
        "rev": "85dbfc7aaf52ecb755f87e577ddbe6dbbdbc1054",
        "type": "github"
      },
      "original": {
        "owner": "nixos",
        "ref": "nixos-unstable",
        "repo": "nixpkgs",
        "type": "github"
      }
    },
    "pre-commit-hooks": {
      "inputs": {
        "flake-compat": "flake-compat",
        "gitignore": "gitignore",
        "nixpkgs": [
          "nixpkgs"
        ]
      },
      "locked": {
        "lastModified": 1754416808,
        "narHash": "sha256-c6yg0EQ9xVESx6HGDOCMcyRSjaTpNJP10ef+6fRcofA=",
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "rev": "9c52372878df6911f9afc1e2a1391f55e4dfc864",
        "type": "github"
      },
      "original": {
        "owner": "cachix",
        "repo": "pre-commit-hooks.nix",
        "type": "github"
      }
    },
    "root": {
      "inputs": {
        "nixpkgs": "nixpkgs",
        "pre-commit-hooks": "pre-commit-hooks"
      }
    }
  },
  "root": "root",
  "version": 7
}



================================================
FILE: flake.nix
================================================
{
  description = "A hello world template for Python Flask";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-unstable";
    pre-commit-hooks = {
      url = "github:cachix/pre-commit-hooks.nix";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      ...
    }:
    let
      supportedSystems = [
        "x86_64-linux"
        "aarch64-linux"
        "x86_64-darwin"
        "aarch64-darwin"
      ];

      forAllSystems = nixpkgs.lib.genAttrs supportedSystems;

      nixpkgsFor = forAllSystems (
        system:
        import nixpkgs {
          inherit system;
          overlays = [ self.overlays.default ];
        }
      );
    in
    {
      overlays.default = final: _prev: {
        flask_hello = self.packages.${final.system}.default;
      };

      packages = forAllSystems (system: {
        default = nixpkgsFor.${system}.callPackage ./nix/package.nix { };
      });

      devShells = forAllSystems (system: {
        default = import ./nix/shell.nix { pkgs = nixpkgsFor.${system}; };
      });

      nixosModules = {
        flask_hello = import ./nix/module.nix;
      };

      formatter = forAllSystems (system: nixpkgs.legacyPackages.${system}.nixfmt-rfc-style);

      checks = forAllSystems (system: {
        build-packages = nixpkgsFor."${system}".linkFarm "flake-packages-${system}" self.packages.${system};
        pre-commit-check = self.inputs.pre-commit-hooks.lib.${system}.run {
          src = ./.;
          hooks = {
            nixfmt-rfc-style.enable = true;
            black.enable = true;
          };
        };
      });
    };
}



================================================
FILE: pyproject.toml
================================================
[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "flask_hello"
version = "0.1.0"
dependencies = [
    "flask",
]

[tool.setuptools.packages.find]
include = ["flask_hello*"]



================================================
FILE: .envrc
================================================
use flake



================================================
FILE: flask_hello/__init__.py
================================================
from flask import Flask

def create_app():
    app = Flask(__name__)

    from .blueprints.home import home_bp
    app.register_blueprint(home_bp)

    from flask import render_template
    
    @app.errorhandler(404)
    def not_found_error(error):
        return render_template('errors.html', error='Page not found'), 404

    return app



================================================
FILE: flask_hello/blueprints/__init__.py
================================================



================================================
FILE: flask_hello/blueprints/home.py
================================================
from flask import Blueprint, render_template

home_bp = Blueprint("home", __name__)


@home_bp.route("/")
def index():
    return render_template("index.html")



================================================
FILE: flask_hello/static/css/style.css
================================================
body {
    font-family: Arial, sans-serif;
    margin: 40px;
    background-color: #f5f5f5;
}

h1 {
    color: #333;
}



================================================
FILE: flask_hello/templates/base.html
================================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Flask App{% endblock %}</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='css/style.css') }}">
</head>
<body>
    {% block content %}{% endblock %}
</body>
</html>



================================================
FILE: flask_hello/templates/errors.html
================================================
{% extends "base.html" %}

{% block content %}
<h1>Error</h1>
<p>{{ error }}</p>
<a href="{{ url_for('home.index') }}">Go Home</a>
{% endblock %}



================================================
FILE: flask_hello/templates/index.html
================================================
{% extends "base.html" %}

{% block content %}
<h1>Hello, World!</h1>
<p>Welcome to your Flask application.</p>
{% endblock %}



================================================
FILE: nix/module.nix
================================================
{
  inputs,
  config,
  lib,
  pkgs,
  ...
}:

let
  cfg = config.services.flask_hello;
  domain = config.networking.domain;
  fqdn = if (cfg.nginx.subdomain != "") then "${cfg.nginx.subdomain}.${domain}" else domain;

  inherit (lib)
    getExe
    mkDefault
    mkEnableOption
    mkIf
    mkOption
    mkPackageOption
    types
    ;
in
{
  options.services.flask_hello = {
    enable = mkEnableOption "Flask Hello World service.";

    package = mkPackageOption pkgs "flask_hello" { };

    port = mkOption {
      type = types.port;
      default = 5000;
      description = "Port for the Flask server to listen on.";
    };

    user = mkOption {
      type = types.str;
      description = "The user the Flask service will run as.";
      default = "flaskapp";
    };

    group = mkOption {
      type = types.str;
      description = "The group the Flask service will run as.";
      default = "flaskapp";
    };

    nginx = {
      enable = mkOption {
        type = types.bool;
        default = true;
        description = "Enable Nginx as a reverse proxy for the Flask application.";
      };
      subdomain = mkOption {
        type = types.str;
        default = "flask_hello";
        description = "Subdomain for the Nginx virtual host. Leave empty for root domain.";
      };
      ssl = mkOption {
        type = types.bool;
        default = true;
        description = "Enable SSL for the Nginx virtual host using ACME.";
      };
    };
  };

  config = mkIf cfg.enable {
    nixpkgs.overlays = [ inputs.flask_hello.overlays.default ];

    networking.firewall.allowedTCPPorts = [
      80 # ACME challenge
      443
    ];

    systemd.services.flask_hello = {
      description = "Flask Hello World";
      after = [ "network.target" ];
      wantedBy = [ "multi-user.target" ];
      serviceConfig = {
        ExecStart = "${getExe cfg.package}";
        Restart = "on-failure";
        User = cfg.user;
        Group = cfg.group;
      };
    };

    users.users."${cfg.user}" = {
      isSystem = true;
      group = cfg.group;
    };
    users.groups."${cfg.group}" = { };

    services.nginx = mkIf cfg.nginx.enable {
      enable = mkDefault true;
      virtualHosts."${fqdn}" = {
        enableACME = cfg.nginx.ssl;
        forceSSL = cfg.nginx.ssl;
        locations."/".proxyPass = "http://127.0.0.1:${toString cfg.port}";
        locations."/static" = {
          alias = "${cfg.package}/static";
          expires = "30d";
          tryFiles = "$uri $uri/ =404";
        };
      };
    };

    security.acme = mkIf (cfg.nginx.enable && cfg.nginx.ssl) {
      acceptTerms = true;
      defaults.email = mkDefault "postmaster@${domain}";
      defaults.webroot = mkDefault "/var/lib/acme/acme-challenge";
      certs."${domain}".postRun = "systemctl reload nginx.service";
    };
  };
}



================================================
FILE: nix/package.nix
================================================
{
  python3,
  ...
}:

python3.pkgs.buildPythonApplication rec {
  pname = "flask_hello";
  version = "0.1.0";
  pyproject = true;

  build-system = [ python3.pkgs.setuptools ];

  dependencies = with python3.pkgs; [
    flask
  ];

  src = ../.;

  installPhase = ''
    runHook preInstall

    mkdir -p $out/{bin,share}
    cp -r $src/${pname} $out/bin/
    cp $src/app.py $out/bin/
    chmod +x $out/bin/app.py
    ln -s $out/bin/${pname}/static $out/share/static

    runHook postInstall
  '';

  doCheck = false;

  meta.mainProgram = "app.py";
}



================================================
FILE: nix/shell.nix
================================================
{
  pkgs ? import <nixpkgs> { },
  ...
}:

pkgs.mkShell {
  buildInputs = [
    (pkgs.python3.withPackages (
      p: with p; [
        flask
        python-dotenv
        gunicorn
      ]
    ))
    pkgs.nixfmt-tree
    pkgs.black
  ];
}



================================================
FILE: .github/workflows/python-nix.yml
================================================
name: Python Nix Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Nix
      uses: cachix/install-nix-action@v18
      with:
          nix_path: nixpkgs=channel:nixos-unstable

    - name: Run nix flake check
      run: nix flake check


