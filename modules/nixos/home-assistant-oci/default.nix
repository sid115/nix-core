{
  config,
  lib,
  ...
}:

let
  cfg = config.services.home-assistant-oci;

  inherit (lib)
    mkDefault
    mkEnableOption
    mkIf
    mkOption
    mkOverride
    types
    ;
in
{
  options.services.home-assistant-oci = {
    enable = mkEnableOption "Enable the Home Assistant container with Podman.";

    dataDir = mkOption {
      type = types.path;
      default = "/data/home-assistant";
      description = "Directory path for Home Assistant data storage.";
    };
  };

  config = mkIf cfg.enable {
    systemd.tmpfiles.rules = [
      "d ${cfg.dataDir} 0755 root root -"
    ];

    virtualisation = {
      podman = {
        enable = true;
        autoPrune.enable = true;
        dockerCompat = true;
        defaultNetwork.settings = {
          dns_enabled = true;
        };
      };
      oci-containers = {
        backend = "podman";
        containers.home-assistant = {
          image = mkDefault "ghcr.io/home-assistant/home-assistant:stable";
          volumes = [
            "${cfg.dataDir}:/config:rw"
            "/etc/localtime:/etc/localtime:ro"
            "/run/dbus:/run/dbus:ro"
          ];
          log-driver = mkDefault "journald";
          extraOptions = mkDefault [
            "--network=host"
            "--privileged"
          ];
        };
      };
    };

    networking.firewall.interfaces =
      let
        podman = if config.networking.nftables.enable then "podman*" else "podman+";
      in
      {
        "${podman}".allowedUDPPorts = [ 53 ];
      };

    systemd.services."podman-home-assistant" = {
      serviceConfig = {
        Restart = mkOverride 90 "always";
      };
      after = [ "systemd-tmpfiles-setup.service" ];
      wants = [ "systemd-tmpfiles-setup.service" ];
      partOf = [ "podman-compose-home-assistant-root.target" ];
      wantedBy = [ "podman-compose-home-assistant-root.target" ];
    };

    systemd.targets."podman-compose-home-assistant-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
